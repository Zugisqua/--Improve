#!/bin/bash


#=====-declare=====#
dotlog=$HOME/.logitime
config=$dotlog/.ltconfig
num=$(grep -Po '(?<=num:).+' $config)
  log_=$dotlog/log_
  log=$dotlog/log_$num
  list=$dotlog/list
  config=$dotlog/.ltconfig
for i in $(seq 0 6)
do
    At[i]=$(grep -Po "(?<=day $i:).+" $config)
done
tmp=$dotlog/.tmp


function tme(){
    echo -n "$((6+$1/6)):$(($1%6))0"
}
function itv(){
    echo -n "$(($1/6)):$(($1%6))0"
}
#==========#
Dat=$(grep -Po "(?<=:).+" $log|\
	  awk '{print $1" "$3-$2}')
Sub=$(grep -Po "(?<=:).+" $log|\
	  awk '{print $1}'|\
	  sort -fuk1)
Mai=$(echo "$Sub"|\
	  awk -F "_" '{print $1}'|\
	  sort -fuk1)
#==========#

for i in $(seq 0 6)
do
    dat[i]=$(grep -Po "(?<=$i:).+" $log|\
	 awk '{print $1" "$3-$2}')
    _a=$(grep -Po "$i:.+" $log)
    if [[  "$_a" != "" && "$(echo $1)" = "" ]];then
	echo 
	echo -e "DAY:$i"
	echo "$_a"|awk '
	function time(num){
		 return 6+int(num/6)":"num%6"0"
		 }
	function inter(num){
		 return int(num/6)":"num%6"0"
	       	 }
	{
	printf " "time($2)"--"time($3)"\t"inter($3-$2)"\t"$1"\n" 
	}'
    fi
done
cat <<EOF

---------------------------------
EOF
if [[ "$(echo $1)" = "" ]];then
    j=1
    for i in $Mai
    do
	_a=$(echo "$Dat"|\
		 grep "$i"|\
		 awk '{sum+=$2}END{print sum}')
	_b=$(echo "$Dat"|\
		 awk '{sum+=$2}END{print sum}')
	printf "$i-Duaration: $(itv $_a)|$((100*$_a/$_b))%%\t"
	[[ "$((j%2))" = 0 ]] && echo " "
	j=$[j+1]
    done
    echo  ""

cat <<EOF
=================================
EOF
fi
if [[ "$(echo $1)" = "" ]];then
    for i in $(seq 0 6)
    do
	_a=$(echo "${dat[i]}"|awk '{sum+=$2}END{print sum}')
	printf "[$i]  Total-Dua: $(itv $_a)/$(itv ${At[i]})\tPer: $((100*$_a/${At[i]}))%% \n"
	AT=$((AT+At[i]))
    done
    _a=$(echo "$Dat"|\
	     awk '{sum+=$2}END{print sum}')
    printf "[ ]  Total-All: $(itv $_a)/$(itv $AT)\tPer: $((100*$_a/$AT))%%\n"

cat <<EOF

---------------------------------
EOF
fi
#=====Cal=====#
if [ "$1" != "" ] ;then
    if [ "$(echo $1|grep -|grep c)" != "" ];then
	Data="$(grep " " "$log_"*|grep -Po '(?<=log_).+'|awk '{print $1" "$3-$2}'|sort -nk1 -t ":")"
	Cal[0]="$(echo "$Data"|awk -F ":" '{print $NF}')" #all
	Cal[1]="$(echo "$Data"|awk -F ":" '{print $(NF-1)":"$NF}'|sort -nk1 -t ":")" #day
	Cal[2]="$(echo "$Data"|awk -F ":" '{print $1":"$NF}'|sort -nk1 -t ":")" #week
	
	Lis[0]="$(cat $list| awk '{print $1}'| sort -k1 -t "_")" #all
	Lis[1]="$(echo "${Cal[1]}"|awk '{print $1}'|sort -u)" #day
	Lis[2]="$(echo "${Cal[2]}"|awk '{print $1}'|sort -u)" #week
	for j in 1 2
	do
	    for i in 1 2 #guess max-no."-" is 2
	    do
		_a="$(echo "${Lis[j]}"|grep -Po '.+(?=_)')"
		Lis[j]="$(printf "$_a\n${Lis[j]}")"
	    done
	    Lis[j]="$(echo "${Lis[j]}"|sort -u|sort -nk1 -t ":")"
	done
	for j in 0 1 2
	do
	    Sum[j]=`for i in ${Lis[j]}
	        do      		
	    	echo -n "$i "
	    	echo -n "${Cal[j]}"|\
		     grep "^$i" |\
		     awk '{sum+=$2}END{print sum}'
            done `
	done
	echo calculation done.
	printf "${Sum[0]}" > $tmp"_0"
	printf "${Sum[1]}" > $tmp"_1"
	printf "${Sum[2]}" > $tmp"_2"
    else
	Sum[0]="$(cat "$tmp"_0"")"
	Sum[1]="$(cat "$tmp"_1"")"
	Sum[2]="$(cat "$tmp"_2"")"
    fi
fi
if [ "$(echo $1|grep  r)" != "" ];then	
    #=====tree======#
    mo="$(($(echo $1|grep -Po '(?<=r).+')))"
    echo "${Sum[mo]}"|grep "$2"|\
	   awk '
	       function inter(num){
		    return int(num/6)":"num%6"0"
       	       }		   
	       function inte(num){
    	   	    if (num>0)	
	    	    {return int(num/6)":"num%6"0"}
	       }	       	 
               function tre(da,head){
                    "echo "head"|grep -o _|wc -c "|getline _a
                    if (_a==0){printf "\n"}
                    printf "["da"]" "  \t"
                    if (_a!=0)
                          {for (i=2;i<_a;i++)
                               printf "  "
                               temp="└── "}
                    else
                          temp=""
                    return temp head
	      }
	      function col(obj,head){
	      	        "echo "head"|grep -o _|wc -c "|getline _a
			
			return "\033[3"(2+_a/2)"m"obj"\033[37m"
              }
          {printf tre(col(inter($2),$1),$1)"\n"}'
    echo ""
fi
cat <<EOF

---------------------------------
EOF
