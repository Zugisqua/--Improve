#!/bin/bash

dotlog=$HOME/.logitime
config=$dotlog/.ltconfig
num=$(grep -Po '(?<=num:).+' $config)
  log=$dotlog/log_$num
  list="$(cat $dotlog/list)"
  List=$dotlog/list
  tmp_=$dotlog/.tmp_
  index=$dotlog/*
stat=$(grep -Po "(?<=status:).+" $dotlog/.ltconfig)
  statd=$(grep -Po "(?<=off:).+" $dotlog/.ltconfig)
#=====================

if [ "$(echo $1|grep -o -)" = '-' ];then
    if [ "$(echo $1|grep -o u)" = 'u' ];then
	_Li="$(echo "$list"|grep -P '( U | Z | E )' )"
	echo "$list"|grep ' _ ' > $List
	echo "$_Li"|\
	    awk '
	    function dat(mk,ate,ret){
	    	     "date -d "ate" +%s"|getline _a
	    	     "date -d $(date +%F) +%s"|getline _b
		     _c=int(ret+(_b-_a)/86400)
		     "date +%F"|getline _d
		     if ( _c > 0 ) {
		         if ( mk == "Z" ){ _f="U" }else{_f=mk}
		     }else{ _f="Z"}
		     return _f" "_c" "_d}
	    {print $1" "$2" "dat($3,$5,$4)" "$6" "$7" "$8" "$9" "$10" "$11" "$12}' >> $List
	echo " Up-to-dated."
    fi
    if [  "$(echo $1|grep -o l)" = 'l' ];then
	if [ "$(echo $1|grep -o 0)" != ""  ];then
	    _a="$(echo "$list"|\
	    	       grep -P '( U | Z | E )'|\
		       awk '{print $1}')"
	    Sub="$_a"
	    while [ "$_a" != "" ]
	    do
		_a="$(echo "$_a"|grep -Po '.+(?=_)')"
		Sub="$(printf "$Sub\n$_a"|sort -fuk1)"
	    done
	    for i in $Sub
	    do
		_l="$(printf "$(echo "$list"|grep "$i ")\n$_l")"
	    done
	    list="$_l"
	fi
	if [ "$(echo $1|grep -o 1)" = '1' ];then	    
	    lis=`echo "$list"|\
	    	      grep -P '( _ | E )'|\
	    	      awk '{printf $1" "$2" "$3" "$4" "$5"\n"}'`
	    lit=`echo "$list"|\
	    	      grep -P '( Z | U )'`
	else
	    lis=`echo "$list"|\
	    	      grep ' _ '|\
	    	      awk '{printf $1" "$2" "$3" "$4" "$5"\n"}'`
	    lit=`echo "$list"|\
	    	      grep -P '( U | Z | E )'`
	fi
	echo -e "$lis\n$lit"|\
	    grep "$2" |\
	    sort -fuk1|\
	    awk '
		   function col(head){
		   	    if ($3=="U")
		    	       return "\033[32m"head"\033[37m"
		 	    if ($3=="E")
			       return "\033[33m"head"\033[37m"
			    if ($3=="Z")
			       return "\033[34m"head"\033[37m"
			    if ($3=="_")
		    	       return head
		   }
		   function tre(re,head,info){
		   	    "echo "head"|grep -o _|wc -c "|getline _a
			    if (_a==0){printf "\n"}
			    printf "["col(sqrt(re*re))"]"
			    if (re<0){printf"-"}
			    printf "\t"
			    if (_a!=0)
			       {for (i=2;i<_a;i++)
			       	   printf "  "
			       temp="├─╼ "}
			    else
			       temp="" 
		   	    return temp col(head)"\t   "info

		   }
		   {printf tre($4,$1,$6)"\n"}'
    elif [  "$(echo $1|grep -o a)" = 'a' ];then
	while read a b c d e
	do    
	    printf "$a[$c]=$d\t $e\n"
	done <<< "$list"
    elif [ "$(echo $1|grep -o x)" = 'x'  ];then
	read -p "InPut: " a c b 
	if [[  $b != ""  ]];then
	    if [[ $(($c)) != "0" ]];then
		printf "$a 0000000000 Z -$c $(date '+%F') $b\n" >> $List
	    else
		printf "$a 0000000000 Z 0 $(date '+%F') $c $b\n" >> $List		
	    fi
	    printf " Build.\n"
	else
	    echo " Invalid! try again."
	fi
    elif [ "$(echo $1|grep -o f)" = 'f' ];then	
	if [[  "$(echo $1|grep -o f)" = 'f' &&  "$(echo $1|grep -o 0)" != "" ]];then
	    sed  "s#$2 0000000000 _#$2 0000000000 Z#g" $List > $tmp_
	elif [[ "$3" = "E" || "$3" = "U" || "$3" = "Z" || "$3" = "_" ]];then
	    sed  "s#$2 0000000000 .#$2 0000000000 $3#g" $List > $tmp_
	elif [ "$3" = "" ];then
	    sed  "s#$2 0000000000 .#$2 0000000000 _#g" $List > $tmp_
	fi
	if [[ $(diff $tmp_ $List) && "$2" != "" ]] ;then
	    printf " $2 status changed.\n"
	    mv $tmp_ $List
	else
	    printf " No such TO-DO or Mark wrong.\n"
	fi
    fi
elif [[ "$1" = "" ]];then
    echo ==$(date)----
    if [[ "$stat" == "off" ]];then
	null="$(echo "$list" |grep -P '( U | Z | E )')"
	echo -e "[End: $statd]"
    else
	null="$(echo "$list" |grep -P "$(date '+%F')")"
    fi
    nul="$(echo "$null"|awk '{print $1}')"
    nu=`for i in $nul
    do
	[[ "$(echo "$null"|grep -c "$i")" == 1 ]] && echo "$null"|grep "$i"
    done`  
    echo ""    
    echo "$nu"| sort -fuk3 |awk '
	function col(head){
		 if ($3=="U")
		    return "\033[32m"head"\033[37m"
		 if ($3=="E")
		    return "\033[33m"head"\033[37m"
		 if ($3=="Z")
		    return "\033[34m"head"\033[37m"
		 if ($3=="_")
		    return "\033[30m"head"\033[37m"
		 }
	{printf ""$4":["col($1)"]\t"$6"\n"}'
    echo ""
else
    echo "==$(date)----"
    echo ""
    grep -i "$1" $index --color=always |\
	grep -Po "(?<=log_).+"|\
	sort -t ":" -k1 -n
    if [[ "$(echo "$1"|grep -o _ )" != "" ]];then 
	echo --------
	grep -i "$1 " $index --color=always |\
	    grep -Po "(?<=0000000000 .).+"
    fi
fi
